# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_folder.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_folder.go
index f0f878e73..047265040 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_folder.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_google_folder.go
@@ -30,11 +30,15 @@ func resourceGoogleFolder() *schema.Resource {
 		},
 
 		Schema: map[string]*schema.Schema{
-			// Format is either folders/{folder_id} or organizations/{org_id}.
-			"parent": {
+			"parent_org_id": {
 				Type:        schema.TypeString,
-				Required:    true,
-				Description: `The resource name of the parent Folder or Organization. Must be of the form folders/{folder_id} or organizations/{org_id}.`,
+				Optional:    true,
+				Description: `The organization id of the parent Organization. Exactly one of parent_org_id or parent_folder_id must be specified.`,
+			},
+			"parent_folder_id": {
+				Type:        schema.TypeString,
+				Optional:    true,
+				Description: `The folder id of the parent Folder. Exactly one of parent_org_id or parent_folder_id must be specified.`,
 			},
 			// Must be unique amongst its siblings.
 			"display_name": {
@@ -77,7 +81,10 @@ func resourceGoogleFolderCreate(d *schema.ResourceData, meta interface{}) error
 	}
 
 	displayName := d.Get("display_name").(string)
-	parent := d.Get("parent").(string)
+	parent, err := getParentID(d)
+	if err != nil {
+		return fmt.Errorf("Error getting parent for folder '%s': %s", displayName, err)
+	}
 
 	var op *resourceManagerV3.Operation
 	err = RetryTimeDuration(func() error {
@@ -147,9 +154,6 @@ func resourceGoogleFolderRead(d *schema.ResourceData, meta interface{}) error {
 	if err := d.Set("folder_id", folderId); err != nil {
 		return fmt.Errorf("Error setting folder_id: %s", err)
 	}
-	if err := d.Set("parent", folder.Parent); err != nil {
-		return fmt.Errorf("Error setting parent: %s", err)
-	}
 	if err := d.Set("display_name", folder.DisplayName); err != nil {
 		return fmt.Errorf("Error setting display_name: %s", err)
 	}
@@ -160,6 +164,20 @@ func resourceGoogleFolderRead(d *schema.ResourceData, meta interface{}) error {
 		return fmt.Errorf("Error setting create_time: %s", err)
 	}
 
+	if strings.HasPrefix(folder.Parent, "organizations/") {
+		orgId := strings.TrimPrefix(folder.Parent, "organizations/")
+		if err := d.Set("parent_org_id", orgId); err != nil {
+			return fmt.Errorf("Error setting parent_org_id: %s", err)
+		}
+	} else if strings.HasPrefix(folder.Parent, "folders/") {
+		folderId := strings.TrimPrefix(folder.Parent, "folders/")
+		if err := d.Set("parent_folder_id", folderId); err != nil {
+			return fmt.Errorf("Error setting parent_folder_id: %s", err)
+		}
+	} else {
+		return fmt.Errorf("Error reading folder '%s' since its parent '%s' has an unrecognizable format.", folder.DisplayName, folder.Parent)
+	}
+
 	return nil
 }
 
@@ -184,11 +202,14 @@ func resourceGoogleFolderUpdate(d *schema.ResourceData, meta interface{}) error
 		}
 	}
 
-	if d.HasChange("parent") {
-		newParent := d.Get("parent").(string)
+	if d.HasChange("parent_org_id") || d.HasChange("parent_folder_id") {
+		newParent, err := getParentID(d)
+		if err != nil {
+			return fmt.Errorf("Error getting parent for folder '%s': %s", displayName, err)
+		}
 
 		var op *resourceManagerV3.Operation
-		err := retry(func() error {
+		err = retry(func() error {
 			var reqErr error
 			op, reqErr = config.NewResourceManagerV3Client(userAgent).Folders.Move(d.Id(), &resourceManagerV3.MoveFolderRequest{
 				DestinationParent: newParent,
@@ -260,3 +281,19 @@ func getGoogleFolder(folderName, userAgent string, d *schema.ResourceData, confi
 	}
 	return folder, nil
 }
+
+func getParentID(d *schema.ResourceData) (string, error) {
+	orgId := d.Get("parent_org_id").(string)
+	folderId := d.Get("parent_folder_id").(string)
+
+	if orgId != "" && folderId != "" {
+		return "", fmt.Errorf("'parent_org_id' and 'parent_folder_id' cannot be both set.")
+	}
+	if orgId != "" {
+		return "organizations/" + orgId, nil
+	}
+	if folderId != "" {
+		return "folders/" + folderId, nil
+	}
+	return "", fmt.Errorf("exactly one of 'parent_org_id' or 'parent_folder_id' must be specified.")
+}
